Index: apps/users/serializers.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\nfrom rest_framework_simplejwt.serializers import TokenRefreshSerializer\nfrom rest_framework_simplejwt.state import token_backend\nfrom rest_framework.exceptions import PermissionDenied\n\nfrom apps.users.models import User, UserSMI\n\n\nclass UserCRUDSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(max_length=400, required=False)\n\n    class Meta:\n        model = User\n        exclude = ['groups', 'user_permissions', 'resetPasswordUUID', 'resetPasswordDate']\n\n    def create(self, validated_data):\n        user = User(**validated_data)\n        user.set_password(validated_data['password'])\n        user.save()\n        return user\n\n    def update(self, instance, validated_data):\n        print(\"priver doni\")\n        for field, value in validated_data.items():\n            if field == 'password':\n                instance.set_password(value)\n            else:\n                setattr(instance, field, value)\n        instance.save()\n        return instance\n\n\nclass CustomTokenRefreshSerializer(TokenRefreshSerializer):\n    def validate(self, attrs):\n        data = super(CustomTokenRefreshSerializer, self).validate(attrs)\n        decoded_payload = token_backend.decode(data['access'], verify=True)\n        user_id = decoded_payload['user_id']\n        user = User.objects.get(id=user_id)\n        data.update({\n            'profile': \n                UserSerializer(user, context={'request': self.context['request']}).data\n        })\n        return data\n\n\nclass UserSMISerializer(serializers.ModelSerializer):\n    password = serializers.CharField(max_length=400, required=False)\n\n    class Meta:\n        model = UserSMI\n        fields = '__all__'\n\n    def create(self, validated_data):\n        user_smi = UserSMI(**validated_data)\n        user_smi.set_password(validated_data['password'])\n        user_smi.save()\n        return user_smi\n\n    def update(self, instance, validated_data):\n        print(\"priver doni\")\n        for field, value in validated_data.items():\n            if field == 'password':\n                instance.set_password(value)\n            else:\n                setattr(instance, field, value)\n        instance.save()\n        return instance\n\n\nclass LoginUserSerializer(serializers.Serializer):\n    email = serializers.EmailField(required=True)\n    password = serializers.CharField(required=True)\n\n\nclass UserListSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = '__all__'\n\n\nclass UserSMIListSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserSMI\n        fields = '__all__'\n\n\nclass CombinedUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = '__all__'\n\n    def to_representation(self, instance):\n        user = self.context['request'].user\n        if isinstance(instance, User) and instance == user:\n            return UserListSerializer(instance).to_representation(instance)\n        elif isinstance(instance, UserSMI) and instance == user:\n            return UserSMIListSerializer(instance).to_representation(instance)\n        else:\n            raise PermissionDenied(\"You do not have permission to view this data.\")\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/apps/users/serializers.py b/apps/users/serializers.py
--- a/apps/users/serializers.py	(revision 5446d9b372511e1332733b7dbe675956c48cc849)
+++ b/apps/users/serializers.py	(date 1690284059403)
@@ -48,7 +48,7 @@
 
     class Meta:
         model = UserSMI
-        fields = '__all__'
+        exclude = ['groups', 'user_permissions', 'resetPasswordUUID', 'resetPasswordDate']
 
     def create(self, validated_data):
         user_smi = UserSMI(**validated_data)
Index: apps/users/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django_filters.rest_framework import DjangoFilterBackend\nfrom rest_framework import filters\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework import viewsets, permissions, status, generics\nfrom rest_framework.authtoken.serializers import AuthTokenSerializer\nfrom django.contrib.auth.hashers import check_password\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework_simplejwt.views import TokenRefreshView\n\nfrom apps.users.models import User\nfrom apps.users.serializers import (\n    UserCRUDSerializer, CustomTokenRefreshSerializer, LoginUserSerializer, UserSMISerializer, CombinedUserSerializer\n)\n\n\nclass MVSDynamicPermission(permissions.BasePermission):\n    def has_permission(self, request, view):\n        if view.action == 'update':\n            if request.user.is_authenticated:\n                return True\n            else:\n                return False\n        else:\n            return True\n\n\nclass UserMVS(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    lookup_field = 'uniqueId'\n    serializer_class = UserCRUDSerializer\n    filter_backends = [filters.SearchFilter]\n\n    def create(self, request, *args, **kwargs):\n        serializer = self.serializer_class(\n            data=request.data, context={'request': request}\n        )\n        serializer.is_valid(raise_exception=True)\n        serializer.save()\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\n\n\nclass UserSMI(viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    lookup_field = 'uniqueId'\n    serializer_class = UserSMISerializer\n    filter_backends = [filters.SearchFilter]\n\n    def create(self, request, *args, **kwargs):\n        serializer = self.serializer_class(\n            data=request.data, context={'request': request}\n        )\n        serializer.is_valid(raise_exception=True)\n        serializer.save()\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\n\n    def update(self, request, *args, **kwargs):\n        user = request.user\n        data = request.data.dict()\n        serializer = UserSMISerializer(user, data=data, context={'request': request})\n        serializer.is_valid(raise_exception=True)\n        serializer.save()\n        return Response(serializer.data)\n    \n\nclass CustomTokenRefreshView(TokenRefreshView):\n    serializer_class = CustomTokenRefreshSerializer\n\n\nclass UserLoginView(APIView):\n    queryset = User.objects.all()\n    serializer_class = LoginUserSerializer\n\n    def post(self, request, *args, **kwargs):\n        serializer = self.serializer_class(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        \n        try:\n            user = User.objects.get(email=serializer.validated_data['email'])\n            if user.check_password(serializer.validated_data['password']):\n                show_serializer = UserCRUDSerializer(user)\n                return Response(show_serializer.data, status=status.HTTP_200_OK)\n        except User.DoesNotExist:\n            pass\n        \n        return Response(status=status.HTTP_403_FORBIDDEN)\n\n\nclass CurrentUserView(APIView):\n    permission_classes = [IsAuthenticated]\n\n    def get(self, request):\n        user = request.user\n        serializer = CombinedUserSerializer(user, context={'request': request})\n        return Response(serializer.data)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/apps/users/views.py b/apps/users/views.py
--- a/apps/users/views.py	(revision 5446d9b372511e1332733b7dbe675956c48cc849)
+++ b/apps/users/views.py	(date 1690284059408)
@@ -1,9 +1,6 @@
-from django_filters.rest_framework import DjangoFilterBackend
 from rest_framework import filters
 from rest_framework.permissions import IsAuthenticated
-from rest_framework import viewsets, permissions, status, generics
-from rest_framework.authtoken.serializers import AuthTokenSerializer
-from django.contrib.auth.hashers import check_password
+from rest_framework import viewsets, permissions, status
 from rest_framework.views import APIView
 from rest_framework.response import Response
 from rest_framework_simplejwt.views import TokenRefreshView
Index: apps/users/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import uuid\nimport os\n\nfrom rest_framework.authtoken.models import Token\nfrom django.conf import settings\nfrom django.contrib.auth.hashers import make_password\nfrom django.contrib.auth.models import AbstractUser\nfrom apps.users.managers import CustomManager\nfrom django.db import models\n\n\n\nparametersForNull = {\n    'null': True,\n    'blank': True,\n}\n\n\nclass Rename:\n    def __init__(self, path):\n        self.path = path\n        \n    def rename(self, instance, filename):\n        ext = filename.split('.')[-1]\n        filename = '%s.%s' % (uuid.uuid4(), ext)\n        return os.path.join(self.path, filename)\n\n\nclass User(AbstractUser):\n    class Meta:\n        verbose_name = \"Пользователь\"\n        verbose_name_plural = \"Пользователи\"\n\n    def __str__(self):\n        return self.email.__str__()\n\n    username = None\n    date_joined = None\n    first_name = None\n    last_name = None\n    last_login = None\n    is_active = models.BooleanField(default=True, verbose_name=\"Активный?\")\n    is_staff = models.BooleanField(default=False, verbose_name=\"Админ?\")\n    is_superuser = models.BooleanField(default=False, verbose_name=\"СуперАдмин?\")\n\n    type_register = models.CharField(verbose_name=\"В качестве кого вы хотите посетить HIT EXPO?\", max_length=300, **parametersForNull)\n\n    company_one = models.CharField(max_length=300, verbose_name=\"Название компании\", **parametersForNull)\n    company_two = models.CharField(max_length=300, verbose_name=\"Юридическое название компании\", **parametersForNull)\n\n    branch = models.CharField(max_length=300, verbose_name=\"Отделение\", **parametersForNull)\n    number_of_employees = models.CharField(max_length=300, verbose_name=\"Количество сотрудников\", **parametersForNull)\n    trade = models.CharField(max_length=300, verbose_name=\"Отрасль (Выберите одну из представленных 'Строительство и недвижимость')\", **parametersForNull)\n    other_trade = models.CharField(max_length=300, verbose_name=\"Другое(Введите свою отрасль если не нашли среди предложенных)\", **parametersForNull)\n    direction = models.CharField(max_length=300, verbose_name=\"Направление (Напишите свой вид деятельности “Производство кирпичей”)\", **parametersForNull)\n    describe_company  = models.CharField(max_length=300, verbose_name=\"Опишите свою деятельность (товар или услугу)\", **parametersForNull)\n\n    photo_company = models.ImageField(verbose_name=\"Загрузите устав компании в  png или jpg\", upload_to='images/company', **parametersForNull)\n\n    ######################################            Данные о руководителе            #################################################\n\n    name_manager = models.CharField(max_length=300, verbose_name=\"Ф.И.О (manager)\", **parametersForNull)\n    birth_manager = models.CharField(max_length=300, verbose_name=\"Дата рождения (manager)\", **parametersForNull)\n    inn_manager = models.CharField(max_length=300, verbose_name=\"ИНН/ИИН руководителя\", **parametersForNull)\n    position_manager = models.CharField(max_length=300, verbose_name=\"ИНН/ИИН руководителя\", **parametersForNull)\n    active_manager = models.CharField(max_length=300, verbose_name=\"Действующий на основании\", **parametersForNull)\n\n    ######################################          Контактное лицо          ##################################\n    \n    selection_face = models.CharField(max_length=300, verbose_name=\"Вы являетесь контактным лицом ?\", **parametersForNull)\n    name_face = models.CharField(max_length=300, verbose_name=\"Ф.И.О (Контактное лицо)\", **parametersForNull)\n    phone_face = models.CharField(max_length=300, verbose_name=\"Номер телефона: (Контактное лицо)\", **parametersForNull)\n\n    ################################################################################################################\n    name = models.CharField(max_length=300, verbose_name=\"Ф.И.О\", **parametersForNull)\n    workEmail = models.EmailField(verbose_name=\"Work Email\", default=None, unique=True, **parametersForNull)\n    country = models.CharField(max_length=300, verbose_name=\"Страна\", **parametersForNull)\n    city = models.CharField(max_length=300, verbose_name=\"Город\", **parametersForNull)\n    birth = models.CharField(max_length=300, verbose_name=\"Дата рождения\", **parametersForNull)\n    \n    workPhone = models.CharField(max_length=300, verbose_name=\"Телефон\", **parametersForNull)\n    personalPhone = models.CharField(max_length=300, verbose_name=\"WhatsApp\", **parametersForNull)\n\n    gos_organization = models.CharField(max_length=300, verbose_name=\"Организация\", **parametersForNull)\n    \n    ####### Я заинтересован в #########\n\n    visit = models.BooleanField(verbose_name=\"Посещение на HIT EXPO\", default=False)\n    participation = models.BooleanField(verbose_name=\"Участие на HIT EXPO\", default=False)\n    projects = models.BooleanField(verbose_name=\"Поиске проектов\", default=False)\n    other_one = models.BooleanField(verbose_name=\"Другое\", default=False)\n\n\n    ##########################      Ваши цели посещение HIT Expo?      SMI      ###############################\n\n    smi_bool_one = models.BooleanField(verbose_name=\"Стать частью информационной поддержки\", default=False)\n    smi_bool_two = models.BooleanField(verbose_name=\"Знакомство с новыми компаниями\", default=False)\n    smi_bool_three = models.BooleanField(verbose_name=\"Освещение и полезная информация\", default=False)\n    smi_bool_four = models.BooleanField(verbose_name=\"Участие на пресс-конференции\", default=False)\n\n\n    ##########################      Что вас заинтересовала в нашей выставке?:    GOS     ###############################\n\n    gos_bool_one = models.BooleanField(verbose_name=\"Присутствие инвесторов\", default=False)\n    gos_bool_two = models.BooleanField(verbose_name=\"Потенциал выставки\", default=False)\n    gos_bool_three = models.BooleanField(verbose_name=\"Развитие экономики Кыргызстана\", default=False)\n    gos_bool_four = models.BooleanField(verbose_name=\"Инвестиционные проекты\", default=False)\n\n    ########  Как вы узнали о мероприятие?   #########\n\n    whatsapp_bool = models.BooleanField(verbose_name=\"Whats App\", default=False)\n    telegram_bool = models.BooleanField(verbose_name=\"Telegram\", default=False)\n    radio_bool = models.BooleanField(verbose_name=\"Радио\", default=False)\n    tv_bool = models.BooleanField(verbose_name=\"ТВ\", default=False)\n    instagram_bool = models.BooleanField(verbose_name=\"Инстаграм\", default=False)\n    invite_mail = models.BooleanField(verbose_name=\"Приглашение от организаторов по почте\", default=False)\n    invite_fair = models.BooleanField(verbose_name=\"Приглашение от экспонента выставки\", default=False)\n    invite_minister = models.BooleanField(verbose_name=\"Приглашение от Министерства / ведомства\", default=False)\n    message = models.BooleanField(verbose_name=\"Сообщение по тел/факсу от организаторов\", default=False)\n    ad_city = models.BooleanField(verbose_name=\"Наружная реклама в городе\", default=False)\n    other_two = models.BooleanField(verbose_name=\"Другое\", default=False)\n\n    ################  Какие преимущества и возможности предоставляете?     ###################\n\n    benefits_one = models.BooleanField(verbose_name=\"Присутствие инвесторов\", default=False)\n    benefits_two = models.BooleanField(verbose_name=\"Присутствие государственных органов\", default=False)\n    benefits_three = models.BooleanField(verbose_name=\"Выход на мировой рынок\", default=False)\n    benefits_for = models.BooleanField(verbose_name=\"Реализация продукции\", default=False)\n    benefits_five = models.BooleanField(verbose_name=\"Возможность получения инвестиции\", default=False)\n    benefits_six = models.BooleanField(verbose_name=\"Расширение бизнеса\", default=False)\n    benefits_seven = models.BooleanField(verbose_name=\"Коммуникация с другми участниками\", default=False)\n    benefits_eight = models.BooleanField(verbose_name=\"Программа\", default=False)\n    benefits_nine = models.BooleanField(verbose_name=\"Место и формат проведения\", default=False)\n    benefits_ten = models.BooleanField(verbose_name=\"Возможность получения номинации\", default=False)\n\n    ##############################################       USER           ############################################\n    \n    participant_sector = models.CharField(max_length=300, verbose_name=\"В качестве кого вы хотите посетить HIT EXPO ?\", **parametersForNull)\n    \n    position_main = models.CharField(max_length=300, verbose_name=\"Должность\", **parametersForNull)\n\n    #########################################        СМИ       #########################################\n        \n    image_certificate_smi = models.ImageField(verbose_name=\"Загрузите вашего журналистского удостоверения в  png или jpg\", upload_to='images/certificate-smi', **parametersForNull)\n    image_logo = models.ImageField(verbose_name=\"Загрузите логотип компании в png или jpg\", upload_to='images/logo-smi', **parametersForNull)\n    \n    quantity_person_smi = models.CharField(max_length=300, verbose_name=\"Сколько у вас человек в команде ?\", **parametersForNull)\n    organization_smi = models.CharField(max_length=300, verbose_name=\"Полное юридическое наименование организации\", **parametersForNull)\n    address_one = models.CharField(max_length=300, verbose_name=\"Юридический адрес\", **parametersForNull)\n    address_two = models.CharField(max_length=300, verbose_name=\"Фактический адрес\", **parametersForNull)\n    web_site = models.CharField(verbose_name=\"Укажите url Веб-сайта\", max_length=300, **parametersForNull)\n    work_phone = models.CharField(max_length=300, verbose_name=\"Рабочий телефон\", **parametersForNull)\n    email_smi = models.EmailField(max_length=300, verbose_name=\"Email SMI\", default=None, unique=True, **parametersForNull)\n    \n    smi_team = models.CharField(max_length=300, verbose_name=\"Сколько у вас человек в команде?\", **parametersForNull)\n    \n    \n    #############################################       Участник           ##########################################\n\n    participation_sector = models.CharField(max_length=300, verbose_name=\"Выберите сектор участия (с условиями участия каждого сектора можно ознакомится)\", **parametersForNull)\n        \n    brand = models.CharField(max_length=300, verbose_name=\"Наименование бренда\", **parametersForNull)\n    organization_participant = models.CharField(max_length=300, verbose_name=\"Полное юридическое наименование организации\", **parametersForNull)\n    name_bank = models.CharField(max_length=300, verbose_name=\"Наименование банка\", **parametersForNull)\n    \n    inn = models.CharField(max_length=300, verbose_name=\"ИИН/ИНН(Серия патента компании)\", **parametersForNull)\n    orgn = models.CharField(max_length=300, verbose_name=\"ОГРН(Номер патента)\", **parametersForNull)\n    p_c = models.CharField(max_length=300, verbose_name=\"Р/С\", **parametersForNull)\n    bik = models.CharField(max_length=300, verbose_name=\"БИК\", **parametersForNull)\n    okpo = models.CharField(max_length=300, verbose_name=\"ОКПО\", **parametersForNull)\n    \n    pdf_file = models.FileField(verbose_name=\"Загрузите свидетельство регистрации в pdf\", upload_to='file/register', **parametersForNull)\n    name_manager = models.CharField(max_length=300, verbose_name=\"Ф.И.О руководителя\", **parametersForNull)\n    position_participant = models.CharField(max_length=300, verbose_name=\"Должность (Участник)\", **parametersForNull)\n    description = models.TextField(verbose_name=\"Описание\", **parametersForNull)\n\n\n    email_participant = models.EmailField(max_length=300, verbose_name=\"Email Participant\", default=None, unique=True, **parametersForNull)\n    \n    \n    ###############################################         Контактные лица          #########################################\n\n    name_contact_person = models.CharField(max_length=300, verbose_name=\"Ф.И.О (контактным лицом)\", **parametersForNull)\n    position_contact_person = models.CharField(max_length=300, verbose_name=\"Должность (контактным лицом)\", **parametersForNull)\n    phone_contact_person = models.CharField(max_length=300, verbose_name=\"Телефон (контактным лицом)\", **parametersForNull)\n    whatsapp_contact_person = models.CharField(max_length=300, verbose_name=\"WhatsApp (контактным лицом)\", **parametersForNull)\n\n    # socials\n    instagram = models.CharField(verbose_name=\"Укажите url Instagram\", max_length=300, **parametersForNull)\n    facebook = models.CharField(verbose_name=\"Укажите url Facebook\", max_length=300, **parametersForNull)\n    twitter = models.CharField(verbose_name=\"Укажите url Twitter\", max_length=300, **parametersForNull)\n    \n    #####################################   Investment    #################################\n    \n    agricultural_production = models.BooleanField(verbose_name=\"Производство + сельхоз\", default=False)\n    construction = models.BooleanField(verbose_name=\"Строительство\", default=False)\n    technique = models.BooleanField(verbose_name=\"Строительство + техника\", default=False)\n    textiles = models.BooleanField(verbose_name=\"Текстиль, обувь и аксессуары\", default=False)\n    education = models.BooleanField(verbose_name=\"Образование\", default=False)\n    medicine = models.BooleanField(verbose_name=\"Медицина\", default=False)\n    tourism = models.BooleanField(verbose_name=\"Туризм\", default=False)\n    echo = models.BooleanField(verbose_name=\"Эко\", default=False)\n    it = models.BooleanField(verbose_name=\"IT\", default=False)\n    banks = models.BooleanField(verbose_name=\"Банки\", default=False)\n    kfx = models.BooleanField(verbose_name=\"КФХ\", default=False)\n    krc = models.BooleanField(verbose_name=\"КРС\", default=False)\n    machinery = models.BooleanField(verbose_name=\"Машиностроение\", default=False)\n    industry = models.BooleanField(verbose_name=\"Текстильное промышленность\", default=False)\n    \n    \n    #####################################################################\n    \n    choose_direction_fashion = models.CharField(max_length=300, verbose_name=\"Выберите направление (Fashion)\", **parametersForNull)\n    choose_direction_food = models.CharField(max_length=300, verbose_name=\"Выберите направление (Food)\", **parametersForNull)\n    choose_direction_expert = models.CharField(max_length=300, verbose_name=\"Эксперт\", **parametersForNull)\n    \n    status = models.CharField(max_length=300, verbose_name=\"Статус\", **parametersForNull)\n    manager = models.CharField(max_length=300, verbose_name=\"Менеджер\", **parametersForNull)\n    referal = models.CharField(max_length=300, verbose_name=\"Реферал\", **parametersForNull)\n    \n    ####################################.       PASSWORD    #################################\n    uniqueId = models.UUIDField(unique=True, verbose_name=\"Уникальный id\", **parametersForNull)\n    email = models.EmailField(max_length=200, verbose_name=\"Email\", unique=True)\n\n    resetPasswordUUID = models.UUIDField(verbose_name=\"Ссылка для восстановления пароля\", **parametersForNull)\n    resetPasswordDate = models.BigIntegerField(verbose_name=\"Время восстановления пароля\", **parametersForNull)\n\n    USERNAME_FIELD = 'email'\n\n    REQUIRED_FIELDS = []\n\n    objects = CustomManager()\n\n    def save(self, force_insert=False, force_update=False, using=None,\n            update_fields=None):\n        if not self.id:\n            self.uniqueId = uuid.uuid4()\n        super(User, self).save(force_insert=False, force_update=False, using=None, update_fields=None)\n\n\nclass UserSMI(models.Model):\n\n    class Meta:\n        verbose_name = \"Пользователь\"\n        verbose_name_plural = \"Пользователи\"\n\n    def __str__(self):\n        return self.email.__str__()\n\n    username = None\n    date_joined = None\n    first_name = None\n    last_name = None\n    last_login = None\n\n    image_certificate = models.ImageField(verbose_name=\"Загрузите вашего журналистского удостоверения в  png или jpg\", upload_to='images/certificate-smi', **parametersForNull)\n    image_logo = models.ImageField(verbose_name=\"Загрузите логотип компании в png или jpg\", upload_to='images/logo-smi', **parametersForNull)\n    quantity_person = models.CharField(max_length=300, verbose_name=\"Сколько у вас человек в команде ?\", **parametersForNull)\n    name_organization = models.CharField(max_length=300, verbose_name=\"Полное юридическое наименование организации\", **parametersForNull)\n    address = models.CharField(max_length=300, verbose_name=\"Юридический адрес\", **parametersForNull)\n    web_site = models.CharField(verbose_name=\"Веб-сайт\", max_length=300, **parametersForNull)\n    email_company = models.EmailField(verbose_name=\"Email компании\", max_length=300, **parametersForNull)\n    phone_smi = models.BigIntegerField(verbose_name=\"Телефон\", **parametersForNull)\n\n    uniqueId = models.UUIDField(unique=True, verbose_name=\"Уникальный id\", **parametersForNull)\n    email = models.EmailField(max_length=200, verbose_name=\"Email\", unique=True)\n\n    #_____________________SOCIAL SITE____________________________________________________________________________\n    instagram = models.CharField(verbose_name=\"Instagram\", max_length=300, **parametersForNull)\n    facebook = models.CharField(verbose_name=\"Facebook\", max_length=300, **parametersForNull)\n    twitter = models.CharField(verbose_name=\"Twitter\", max_length=300, **parametersForNull)\n\n    ########  Как вы узнали о мероприятие?   #########\n    whatsapp_bool = models.BooleanField(verbose_name=\"WhatsApp\", default=False)\n    telegram_bool = models.BooleanField(verbose_name=\"Telegram\", default=False)\n    radio_bool = models.BooleanField(verbose_name=\"Радио реклама\", default=False)\n    tv_bool = models.BooleanField(verbose_name=\"ТВ\", default=False)\n    instagram_bool = models.BooleanField(verbose_name=\"Инстаграм\", default=False)\n    invite_mail = models.BooleanField(verbose_name=\"Приглашение от организаторов по почте\", default=False)\n    invite_fair = models.BooleanField(verbose_name=\"Приглашение от экспонента выставки\", default=False)\n    invite_minister = models.BooleanField(verbose_name=\"Приглашение от Министерства / ведомства\", default=False)\n    message = models.BooleanField(verbose_name=\"Сообщение по тел/факсу от организаторов\", default=False)\n    ad_city = models.BooleanField(verbose_name=\"Наружная реклама в городе\", default=False)\n\n    ##########################      Ваши цели посещение HIT Expo?      SMI      ###############################\n    smi_bool_one = models.BooleanField(verbose_name=\"Стать частью информационной поддержки\", default=False)\n    smi_bool_two = models.BooleanField(verbose_name=\"Знакомство с новыми компаниями\", default=False)\n    smi_bool_three = models.BooleanField(verbose_name=\"Освещение и полезная информация\", default=False)\n    smi_bool_four = models.BooleanField(verbose_name=\"Участие на пресс-конференции\", default=False)\n\n    USERNAME_FIELD = 'email'\n\n    REQUIRED_FIELDS = []\n\n    objects = CustomManager()\n\n    def save(self, force_insert=False, force_update=False, using=None,\n            update_fields=None):\n        if not self.id:\n            self.uniqueId = uuid.uuid4()\n        super(UserSMI, self).save(force_insert=False, force_update=False, using=None, update_fields=None)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/apps/users/models.py b/apps/users/models.py
--- a/apps/users/models.py	(revision 5446d9b372511e1332733b7dbe675956c48cc849)
+++ b/apps/users/models.py	(date 1690285154880)
@@ -1,13 +1,10 @@
-import uuid
-import os
+import uuid, os
 
-from rest_framework.authtoken.models import Token
-from django.conf import settings
-from django.contrib.auth.hashers import make_password
 from django.contrib.auth.models import AbstractUser
 from apps.users.managers import CustomManager
 from django.db import models
 
+from .choices import Organization
 
 
 parametersForNull = {
@@ -29,7 +26,7 @@
 class User(AbstractUser):
     class Meta:
         verbose_name = "Пользователь"
-        verbose_name_plural = "Пользователи"
+        verbose_name_plural = "Пользовати"
 
     def __str__(self):
         return self.email.__str__()
@@ -39,185 +36,7 @@
     first_name = None
     last_name = None
     last_login = None
-    is_active = models.BooleanField(default=True, verbose_name="Активный?")
-    is_staff = models.BooleanField(default=False, verbose_name="Админ?")
-    is_superuser = models.BooleanField(default=False, verbose_name="СуперАдмин?")
 
-    type_register = models.CharField(verbose_name="В качестве кого вы хотите посетить HIT EXPO?", max_length=300, **parametersForNull)
-
-    company_one = models.CharField(max_length=300, verbose_name="Название компании", **parametersForNull)
-    company_two = models.CharField(max_length=300, verbose_name="Юридическое название компании", **parametersForNull)
-
-    branch = models.CharField(max_length=300, verbose_name="Отделение", **parametersForNull)
-    number_of_employees = models.CharField(max_length=300, verbose_name="Количество сотрудников", **parametersForNull)
-    trade = models.CharField(max_length=300, verbose_name="Отрасль (Выберите одну из представленных 'Строительство и недвижимость')", **parametersForNull)
-    other_trade = models.CharField(max_length=300, verbose_name="Другое(Введите свою отрасль если не нашли среди предложенных)", **parametersForNull)
-    direction = models.CharField(max_length=300, verbose_name="Направление (Напишите свой вид деятельности “Производство кирпичей”)", **parametersForNull)
-    describe_company  = models.CharField(max_length=300, verbose_name="Опишите свою деятельность (товар или услугу)", **parametersForNull)
-
-    photo_company = models.ImageField(verbose_name="Загрузите устав компании в  png или jpg", upload_to='images/company', **parametersForNull)
-
-    ######################################            Данные о руководителе            #################################################
-
-    name_manager = models.CharField(max_length=300, verbose_name="Ф.И.О (manager)", **parametersForNull)
-    birth_manager = models.CharField(max_length=300, verbose_name="Дата рождения (manager)", **parametersForNull)
-    inn_manager = models.CharField(max_length=300, verbose_name="ИНН/ИИН руководителя", **parametersForNull)
-    position_manager = models.CharField(max_length=300, verbose_name="ИНН/ИИН руководителя", **parametersForNull)
-    active_manager = models.CharField(max_length=300, verbose_name="Действующий на основании", **parametersForNull)
-
-    ######################################          Контактное лицо          ##################################
-    
-    selection_face = models.CharField(max_length=300, verbose_name="Вы являетесь контактным лицом ?", **parametersForNull)
-    name_face = models.CharField(max_length=300, verbose_name="Ф.И.О (Контактное лицо)", **parametersForNull)
-    phone_face = models.CharField(max_length=300, verbose_name="Номер телефона: (Контактное лицо)", **parametersForNull)
-
-    ################################################################################################################
-    name = models.CharField(max_length=300, verbose_name="Ф.И.О", **parametersForNull)
-    workEmail = models.EmailField(verbose_name="Work Email", default=None, unique=True, **parametersForNull)
-    country = models.CharField(max_length=300, verbose_name="Страна", **parametersForNull)
-    city = models.CharField(max_length=300, verbose_name="Город", **parametersForNull)
-    birth = models.CharField(max_length=300, verbose_name="Дата рождения", **parametersForNull)
-    
-    workPhone = models.CharField(max_length=300, verbose_name="Телефон", **parametersForNull)
-    personalPhone = models.CharField(max_length=300, verbose_name="WhatsApp", **parametersForNull)
-
-    gos_organization = models.CharField(max_length=300, verbose_name="Организация", **parametersForNull)
-    
-    ####### Я заинтересован в #########
-
-    visit = models.BooleanField(verbose_name="Посещение на HIT EXPO", default=False)
-    participation = models.BooleanField(verbose_name="Участие на HIT EXPO", default=False)
-    projects = models.BooleanField(verbose_name="Поиске проектов", default=False)
-    other_one = models.BooleanField(verbose_name="Другое", default=False)
-
-
-    ##########################      Ваши цели посещение HIT Expo?      SMI      ###############################
-
-    smi_bool_one = models.BooleanField(verbose_name="Стать частью информационной поддержки", default=False)
-    smi_bool_two = models.BooleanField(verbose_name="Знакомство с новыми компаниями", default=False)
-    smi_bool_three = models.BooleanField(verbose_name="Освещение и полезная информация", default=False)
-    smi_bool_four = models.BooleanField(verbose_name="Участие на пресс-конференции", default=False)
-
-
-    ##########################      Что вас заинтересовала в нашей выставке?:    GOS     ###############################
-
-    gos_bool_one = models.BooleanField(verbose_name="Присутствие инвесторов", default=False)
-    gos_bool_two = models.BooleanField(verbose_name="Потенциал выставки", default=False)
-    gos_bool_three = models.BooleanField(verbose_name="Развитие экономики Кыргызстана", default=False)
-    gos_bool_four = models.BooleanField(verbose_name="Инвестиционные проекты", default=False)
-
-    ########  Как вы узнали о мероприятие?   #########
-
-    whatsapp_bool = models.BooleanField(verbose_name="Whats App", default=False)
-    telegram_bool = models.BooleanField(verbose_name="Telegram", default=False)
-    radio_bool = models.BooleanField(verbose_name="Радио", default=False)
-    tv_bool = models.BooleanField(verbose_name="ТВ", default=False)
-    instagram_bool = models.BooleanField(verbose_name="Инстаграм", default=False)
-    invite_mail = models.BooleanField(verbose_name="Приглашение от организаторов по почте", default=False)
-    invite_fair = models.BooleanField(verbose_name="Приглашение от экспонента выставки", default=False)
-    invite_minister = models.BooleanField(verbose_name="Приглашение от Министерства / ведомства", default=False)
-    message = models.BooleanField(verbose_name="Сообщение по тел/факсу от организаторов", default=False)
-    ad_city = models.BooleanField(verbose_name="Наружная реклама в городе", default=False)
-    other_two = models.BooleanField(verbose_name="Другое", default=False)
-
-    ################  Какие преимущества и возможности предоставляете?     ###################
-
-    benefits_one = models.BooleanField(verbose_name="Присутствие инвесторов", default=False)
-    benefits_two = models.BooleanField(verbose_name="Присутствие государственных органов", default=False)
-    benefits_three = models.BooleanField(verbose_name="Выход на мировой рынок", default=False)
-    benefits_for = models.BooleanField(verbose_name="Реализация продукции", default=False)
-    benefits_five = models.BooleanField(verbose_name="Возможность получения инвестиции", default=False)
-    benefits_six = models.BooleanField(verbose_name="Расширение бизнеса", default=False)
-    benefits_seven = models.BooleanField(verbose_name="Коммуникация с другми участниками", default=False)
-    benefits_eight = models.BooleanField(verbose_name="Программа", default=False)
-    benefits_nine = models.BooleanField(verbose_name="Место и формат проведения", default=False)
-    benefits_ten = models.BooleanField(verbose_name="Возможность получения номинации", default=False)
-
-    ##############################################       USER           ############################################
-    
-    participant_sector = models.CharField(max_length=300, verbose_name="В качестве кого вы хотите посетить HIT EXPO ?", **parametersForNull)
-    
-    position_main = models.CharField(max_length=300, verbose_name="Должность", **parametersForNull)
-
-    #########################################        СМИ       #########################################
-        
-    image_certificate_smi = models.ImageField(verbose_name="Загрузите вашего журналистского удостоверения в  png или jpg", upload_to='images/certificate-smi', **parametersForNull)
-    image_logo = models.ImageField(verbose_name="Загрузите логотип компании в png или jpg", upload_to='images/logo-smi', **parametersForNull)
-    
-    quantity_person_smi = models.CharField(max_length=300, verbose_name="Сколько у вас человек в команде ?", **parametersForNull)
-    organization_smi = models.CharField(max_length=300, verbose_name="Полное юридическое наименование организации", **parametersForNull)
-    address_one = models.CharField(max_length=300, verbose_name="Юридический адрес", **parametersForNull)
-    address_two = models.CharField(max_length=300, verbose_name="Фактический адрес", **parametersForNull)
-    web_site = models.CharField(verbose_name="Укажите url Веб-сайта", max_length=300, **parametersForNull)
-    work_phone = models.CharField(max_length=300, verbose_name="Рабочий телефон", **parametersForNull)
-    email_smi = models.EmailField(max_length=300, verbose_name="Email SMI", default=None, unique=True, **parametersForNull)
-    
-    smi_team = models.CharField(max_length=300, verbose_name="Сколько у вас человек в команде?", **parametersForNull)
-    
-    
-    #############################################       Участник           ##########################################
-
-    participation_sector = models.CharField(max_length=300, verbose_name="Выберите сектор участия (с условиями участия каждого сектора можно ознакомится)", **parametersForNull)
-        
-    brand = models.CharField(max_length=300, verbose_name="Наименование бренда", **parametersForNull)
-    organization_participant = models.CharField(max_length=300, verbose_name="Полное юридическое наименование организации", **parametersForNull)
-    name_bank = models.CharField(max_length=300, verbose_name="Наименование банка", **parametersForNull)
-    
-    inn = models.CharField(max_length=300, verbose_name="ИИН/ИНН(Серия патента компании)", **parametersForNull)
-    orgn = models.CharField(max_length=300, verbose_name="ОГРН(Номер патента)", **parametersForNull)
-    p_c = models.CharField(max_length=300, verbose_name="Р/С", **parametersForNull)
-    bik = models.CharField(max_length=300, verbose_name="БИК", **parametersForNull)
-    okpo = models.CharField(max_length=300, verbose_name="ОКПО", **parametersForNull)
-    
-    pdf_file = models.FileField(verbose_name="Загрузите свидетельство регистрации в pdf", upload_to='file/register', **parametersForNull)
-    name_manager = models.CharField(max_length=300, verbose_name="Ф.И.О руководителя", **parametersForNull)
-    position_participant = models.CharField(max_length=300, verbose_name="Должность (Участник)", **parametersForNull)
-    description = models.TextField(verbose_name="Описание", **parametersForNull)
-
-
-    email_participant = models.EmailField(max_length=300, verbose_name="Email Participant", default=None, unique=True, **parametersForNull)
-    
-    
-    ###############################################         Контактные лица          #########################################
-
-    name_contact_person = models.CharField(max_length=300, verbose_name="Ф.И.О (контактным лицом)", **parametersForNull)
-    position_contact_person = models.CharField(max_length=300, verbose_name="Должность (контактным лицом)", **parametersForNull)
-    phone_contact_person = models.CharField(max_length=300, verbose_name="Телефон (контактным лицом)", **parametersForNull)
-    whatsapp_contact_person = models.CharField(max_length=300, verbose_name="WhatsApp (контактным лицом)", **parametersForNull)
-
-    # socials
-    instagram = models.CharField(verbose_name="Укажите url Instagram", max_length=300, **parametersForNull)
-    facebook = models.CharField(verbose_name="Укажите url Facebook", max_length=300, **parametersForNull)
-    twitter = models.CharField(verbose_name="Укажите url Twitter", max_length=300, **parametersForNull)
-    
-    #####################################   Investment    #################################
-    
-    agricultural_production = models.BooleanField(verbose_name="Производство + сельхоз", default=False)
-    construction = models.BooleanField(verbose_name="Строительство", default=False)
-    technique = models.BooleanField(verbose_name="Строительство + техника", default=False)
-    textiles = models.BooleanField(verbose_name="Текстиль, обувь и аксессуары", default=False)
-    education = models.BooleanField(verbose_name="Образование", default=False)
-    medicine = models.BooleanField(verbose_name="Медицина", default=False)
-    tourism = models.BooleanField(verbose_name="Туризм", default=False)
-    echo = models.BooleanField(verbose_name="Эко", default=False)
-    it = models.BooleanField(verbose_name="IT", default=False)
-    banks = models.BooleanField(verbose_name="Банки", default=False)
-    kfx = models.BooleanField(verbose_name="КФХ", default=False)
-    krc = models.BooleanField(verbose_name="КРС", default=False)
-    machinery = models.BooleanField(verbose_name="Машиностроение", default=False)
-    industry = models.BooleanField(verbose_name="Текстильное промышленность", default=False)
-    
-    
-    #####################################################################
-    
-    choose_direction_fashion = models.CharField(max_length=300, verbose_name="Выберите направление (Fashion)", **parametersForNull)
-    choose_direction_food = models.CharField(max_length=300, verbose_name="Выберите направление (Food)", **parametersForNull)
-    choose_direction_expert = models.CharField(max_length=300, verbose_name="Эксперт", **parametersForNull)
-    
-    status = models.CharField(max_length=300, verbose_name="Статус", **parametersForNull)
-    manager = models.CharField(max_length=300, verbose_name="Менеджер", **parametersForNull)
-    referal = models.CharField(max_length=300, verbose_name="Реферал", **parametersForNull)
-    
     ####################################.       PASSWORD    #################################
     uniqueId = models.UUIDField(unique=True, verbose_name="Уникальный id", **parametersForNull)
     email = models.EmailField(max_length=200, verbose_name="Email", unique=True)
@@ -238,21 +57,18 @@
         super(User, self).save(force_insert=False, force_update=False, using=None, update_fields=None)
 
 
-class UserSMI(models.Model):
+
+
+
+class UserSMI(User):
 
     class Meta:
-        verbose_name = "Пользователь"
-        verbose_name_plural = "Пользователи"
+        verbose_name = "Пользователь СМИ"
+        verbose_name_plural = "Пользователи СМИ"
 
     def __str__(self):
         return self.email.__str__()
 
-    username = None
-    date_joined = None
-    first_name = None
-    last_name = None
-    last_login = None
-
     image_certificate = models.ImageField(verbose_name="Загрузите вашего журналистского удостоверения в  png или jpg", upload_to='images/certificate-smi', **parametersForNull)
     image_logo = models.ImageField(verbose_name="Загрузите логотип компании в png или jpg", upload_to='images/logo-smi', **parametersForNull)
     quantity_person = models.CharField(max_length=300, verbose_name="Сколько у вас человек в команде ?", **parametersForNull)
@@ -260,10 +76,7 @@
     address = models.CharField(max_length=300, verbose_name="Юридический адрес", **parametersForNull)
     web_site = models.CharField(verbose_name="Веб-сайт", max_length=300, **parametersForNull)
     email_company = models.EmailField(verbose_name="Email компании", max_length=300, **parametersForNull)
-    phone_smi = models.BigIntegerField(verbose_name="Телефон", **parametersForNull)
-
-    uniqueId = models.UUIDField(unique=True, verbose_name="Уникальный id", **parametersForNull)
-    email = models.EmailField(max_length=200, verbose_name="Email", unique=True)
+    phone = models.BigIntegerField(verbose_name="Телефон", **parametersForNull)
 
     #_____________________SOCIAL SITE____________________________________________________________________________
     instagram = models.CharField(verbose_name="Instagram", max_length=300, **parametersForNull)
@@ -288,14 +101,74 @@
     smi_bool_three = models.BooleanField(verbose_name="Освещение и полезная информация", default=False)
     smi_bool_four = models.BooleanField(verbose_name="Участие на пресс-конференции", default=False)
 
-    USERNAME_FIELD = 'email'
+
+class Expert(User):
+
+    class Meta:
+        verbose_name = "Пользователь ЭКСПЕРТ"
+        verbose_name_plural = "Пользователи ЭКСПЕРТ"
+
+    def __str__(self):
+        return self.full_name.__str__()
+
+    full_name = models.CharField(verbose_name="Ф.И.О", max_length=300)
+    phone = models.BigIntegerField(verbose_name="Телефон", **parametersForNull)
+
+    ########  Как вы узнали о мероприятие?   #########
+    whatsapp_bool = models.BooleanField(verbose_name="WhatsApp", default=False)
+    telegram_bool = models.BooleanField(verbose_name="Telegram", default=False)
+    radio_bool = models.BooleanField(verbose_name="Радио реклама", default=False)
+    tv_bool = models.BooleanField(verbose_name="ТВ", default=False)
+    instagram_bool = models.BooleanField(verbose_name="Инстаграм", default=False)
+    invite_mail = models.BooleanField(verbose_name="Приглашение от организаторов по почте", default=False)
+    invite_fair = models.BooleanField(verbose_name="Приглашение от экспонента выставки", default=False)
+    invite_minister = models.BooleanField(verbose_name="Приглашение от Министерства / ведомства", default=False)
+    message = models.BooleanField(verbose_name="Сообщение по тел/факсу от организаторов", default=False)
+    ad_city = models.BooleanField(verbose_name="Наружная реклама в городе", default=False)
+
+
+class Visitor(User):
+
+    class Meta:
+        verbose_name = "Пользователь ПОСЕТИТЕЛЬ"
+        verbose_name_plural = "Пользователи ПОСЕТИТЕЛЬ"
+
+    def __str__(self):
+        return self.full_name.__str__()
+
+    full_name = models.CharField(verbose_name="Ф.И.О", max_length=300)
+    phone = models.BigIntegerField(verbose_name="Телефон", **parametersForNull)
 
-    REQUIRED_FIELDS = []
 
-    objects = CustomManager()
+class GosUser(User):
 
-    def save(self, force_insert=False, force_update=False, using=None,
-            update_fields=None):
-        if not self.id:
-            self.uniqueId = uuid.uuid4()
-        super(UserSMI, self).save(force_insert=False, force_update=False, using=None, update_fields=None)
\ No newline at end of file
+    class Meta:
+        verbose_name = "Пользователь ГОС-ОРГАНЫ"
+        verbose_name_plural = "Пользователи ГОС-ОРГАНЫ"
+
+    def __str__(self):
+        return self.full_name.__str__()
+
+    full_name = models.CharField(verbose_name="Ф.И.О", max_length=300)
+    phone = models.BigIntegerField(verbose_name="Телефон", **parametersForNull)
+    oganization = models.CharField(verbose_name="Организация", max_length=300, choices=Organization, default=None, **parametersForNull)
+    branch = models.CharField(verbose_name="Отделение", max_length=300, **parametersForNull)
+    position = models.CharField(verbose_name="Должность", max_length=300, **parametersForNull)
+
+    ########  Как вы узнали о мероприятие?   #########
+    whatsapp_bool = models.BooleanField(verbose_name="WhatsApp", default=False)
+    telegram_bool = models.BooleanField(verbose_name="Telegram", default=False)
+    radio_bool = models.BooleanField(verbose_name="Радио реклама", default=False)
+    tv_bool = models.BooleanField(verbose_name="ТВ", default=False)
+    instagram_bool = models.BooleanField(verbose_name="Инстаграм", default=False)
+    invite_mail = models.BooleanField(verbose_name="Приглашение от организаторов по почте", default=False)
+    invite_fair = models.BooleanField(verbose_name="Приглашение от экспонента выставки", default=False)
+    invite_minister = models.BooleanField(verbose_name="Приглашение от Министерства / ведомства", default=False)
+    message = models.BooleanField(verbose_name="Сообщение по тел/факсу от организаторов", default=False)
+    ad_city = models.BooleanField(verbose_name="Наружная реклама в городе", default=False)
+
+    ##########################      Что вас заинтересовала в нашей выставке?:    GOS     ###############################
+    gos_bool_one = models.BooleanField(verbose_name="Присутствие инвесторов", default=False)
+    gos_bool_two = models.BooleanField(verbose_name="Потенциал выставки", default=False)
+    gos_bool_three = models.BooleanField(verbose_name="Развитие экономики Кыргызстана", default=False)
+    gos_bool_four = models.BooleanField(verbose_name="Инвестиционные проекты", default=False)
\ No newline at end of file
Index: apps/users/choices.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Status = [\n  [\n    \"Trade\",\n    \"Trade\"\n  ],\n  [\n    \"Investment\",\n    \"Investment\"\n  ],\n  [\n    \"Fashion\",\n    \"Fashion\"\n  ],\n  [\n    \"Food\",\n    \"Food\"\n  ],\n]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/apps/users/choices.py b/apps/users/choices.py
--- a/apps/users/choices.py	(revision 5446d9b372511e1332733b7dbe675956c48cc849)
+++ b/apps/users/choices.py	(date 1690284059420)
@@ -15,4 +15,56 @@
     "Food",
     "Food"
   ],
+]
+
+
+Organization = [
+  [
+    "Министерство иностранных дел",
+    "Министерство иностранных дел"
+  ],
+  [
+    "Министерство внутренних дел",
+    "Министерство внутренних дел"
+  ],
+  [
+    "Министерство образования и науки",
+    "Министерство образования и науки"
+  ],
+  [
+    "Министерство финансов",
+    "Министерство финансов"
+  ],
+  [
+    "Министерство экономики",
+    "Министерство экономики"
+  ],
+  [
+    "Министерство труда и социального развития",
+    "Министерство труда и социального развития"
+  ],
+  [
+    "Министерство транспорта и дорожного хозяйства",
+    "Министерство транспорта и дорожного хозяйства"
+  ],
+  [
+    "Министерство сельского хозяйства, водного хозяйства и регионального развития",
+    "Министерство сельского хозяйства, водного хозяйства и регионального развития"
+  ],
+  [
+    "Государственный комитет национальной безопасности",
+    "Государственный комитет национальной безопасности"
+  ],
+  [
+    "Государственная налоговая служба",
+    "Государственная налоговая служба"
+  ],
+  [
+    "Государственная таможенная служба",
+    "Государственная таможенная служба"
+  ],
+  [
+    "Государственная служба по борьбе с экономической преступностью",
+    "Государственная служба по борьбе с экономической преступностью"
+  ],
 ]
\ No newline at end of file
Index: apps/users/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\n\nfrom .models import User\n\n\nadmin.site.register(User)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/apps/users/admin.py b/apps/users/admin.py
--- a/apps/users/admin.py	(revision 5446d9b372511e1332733b7dbe675956c48cc849)
+++ b/apps/users/admin.py	(date 1690284059424)
@@ -1,6 +1,10 @@
 from django.contrib import admin
 
-from .models import User
+from .models import User, UserSMI, Expert, Visitor, GosUser
 
 
-admin.site.register(User)
\ No newline at end of file
+admin.site.register(User)
+admin.site.register(UserSMI)
+admin.site.register(Expert)
+admin.site.register(Visitor)
+admin.site.register(GosUser)
\ No newline at end of file
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>asgiref==3.7.2\ncertifi==2023.5.7\ncharset-normalizer==3.2.0\ncoreapi==2.3.3\ncoreschema==0.0.4\ndj-database-url==2.0.0\nDjango==3.2.9\ndjango-cors-headers==4.2.0\ndjango-filter==23.2\ndjango-heroku==0.3.1\ndjango-jazzmin==2.6.0\ndjango-rest-swagger==2.2.0\ndjangorestframework==3.14.0\ndjangorestframework-simplejwt==5.2.2\ndrf-yasg==1.21.7\ngunicorn==21.2.0\nidna==3.4\ninflection==0.5.1\nitypes==1.2.0\nJinja2==3.1.2\nMarkupSafe==2.1.3\nopenapi-codec==1.3.2\npackaging==23.1\nPillow==10.0.0\npsycopg2==2.9.6\nPyJWT==2.8.0\npytz==2023.3\nPyYAML==6.0.1\nrequests==2.31.0\nsimplejson==3.19.1\nsqlparse==0.4.4\ntyping_extensions==4.7.1\nuritemplate==4.1.1\nurllib3==2.0.4\nwhitenoise==6.5.0\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/requirements.txt b/requirements.txt
--- a/requirements.txt	(revision 5446d9b372511e1332733b7dbe675956c48cc849)
+++ b/requirements.txt	(date 1690284193100)
@@ -32,4 +32,4 @@
 typing_extensions==4.7.1
 uritemplate==4.1.1
 urllib3==2.0.4
-whitenoise==6.5.0
+whitenoise==6.5.0
\ No newline at end of file
Index: apps/users/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.test import TestCase\n\n# Create your tests here.\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/apps/users/tests.py b/apps/users/tests.py
--- a/apps/users/tests.py	(revision 5446d9b372511e1332733b7dbe675956c48cc849)
+++ b/apps/users/tests.py	(date 1690284059428)
@@ -1,3 +1,110 @@
-from django.test import TestCase
-
-# Create your tests here.
+# from django.test import TestCase
+#
+# # Create your tests here.
+#
+# class User(AbstractUser):
+#     class Meta:
+#         verbose_name = "Пользователь"
+#         verbose_name_plural = "Пользовати"
+#
+#     def __str__(self):
+#         return self.email.__str__()
+#
+#     username = None
+#     date_joined = None
+#     first_name = None
+#     last_name = None
+#     last_login = None
+#     is_active = models.BooleanField(default=True, verbose_name="Активный?")
+#     is_staff = models.BooleanField(default=False, verbose_name="Админ?")
+#     is_superuser = models.BooleanField(default=False, verbose_name="СуперАдмин?")
+#
+#     #############################################       Участник           ##########################################
+#
+#     participation_sector = models.CharField(max_length=300,
+#                                             verbose_name="Выберите сектор участия (с условиями участия каждого сектора можно ознакомится)",
+#                                             **parametersForNull)
+#
+#     brand = models.CharField(max_length=300, verbose_name="Наименование бренда", **parametersForNull)
+#     organization_participant = models.CharField(max_length=300,
+#                                                 verbose_name="Полное юридическое наименование организации",
+#                                                 **parametersForNull)
+#     name_bank = models.CharField(max_length=300, verbose_name="Наименование банка", **parametersForNull)
+#
+#     inn = models.CharField(max_length=300, verbose_name="ИИН/ИНН(Серия патента компании)", **parametersForNull)
+#     orgn = models.CharField(max_length=300, verbose_name="ОГРН(Номер патента)", **parametersForNull)
+#     p_c = models.CharField(max_length=300, verbose_name="Р/С", **parametersForNull)
+#     bik = models.CharField(max_length=300, verbose_name="БИК", **parametersForNull)
+#     okpo = models.CharField(max_length=300, verbose_name="ОКПО", **parametersForNull)
+#
+#     pdf_file = models.FileField(verbose_name="Загрузите свидетельство регистрации в pdf", upload_to='file/register',
+#                                 **parametersForNull)
+#     name_manager = models.CharField(max_length=300, verbose_name="Ф.И.О руководителя", **parametersForNull)
+#     position_participant = models.CharField(max_length=300, verbose_name="Должность (Участник)", **parametersForNull)
+#     description = models.TextField(verbose_name="Описание", **parametersForNull)
+#
+#     email_participant = models.EmailField(max_length=300, verbose_name="Email Participant", default=None, unique=True,
+#                                           **parametersForNull)
+#
+#     ###############################################         Контактные лица          #########################################
+#
+#     name_contact_person = models.CharField(max_length=300, verbose_name="Ф.И.О (контактным лицом)", **parametersForNull)
+#     position_contact_person = models.CharField(max_length=300, verbose_name="Должность (контактным лицом)",
+#                                                **parametersForNull)
+#     phone_contact_person = models.CharField(max_length=300, verbose_name="Телефон (контактным лицом)",
+#                                             **parametersForNull)
+#     whatsapp_contact_person = models.CharField(max_length=300, verbose_name="WhatsApp (контактным лицом)",
+#                                                **parametersForNull)
+#
+#     # socials
+#     instagram = models.CharField(verbose_name="Укажите url Instagram", max_length=300, **parametersForNull)
+#     facebook = models.CharField(verbose_name="Укажите url Facebook", max_length=300, **parametersForNull)
+#     twitter = models.CharField(verbose_name="Укажите url Twitter", max_length=300, **parametersForNull)
+#
+#     #####################################   Investment    #################################
+#
+#     agricultural_production = models.BooleanField(verbose_name="Производство + сельхоз", default=False)
+#     construction = models.BooleanField(verbose_name="Строительство", default=False)
+#     technique = models.BooleanField(verbose_name="Строительство + техника", default=False)
+#     textiles = models.BooleanField(verbose_name="Текстиль, обувь и аксессуары", default=False)
+#     education = models.BooleanField(verbose_name="Образование", default=False)
+#     medicine = models.BooleanField(verbose_name="Медицина", default=False)
+#     tourism = models.BooleanField(verbose_name="Туризм", default=False)
+#     echo = models.BooleanField(verbose_name="Эко", default=False)
+#     it = models.BooleanField(verbose_name="IT", default=False)
+#     banks = models.BooleanField(verbose_name="Банки", default=False)
+#     kfx = models.BooleanField(verbose_name="КФХ", default=False)
+#     krc = models.BooleanField(verbose_name="КРС", default=False)
+#     machinery = models.BooleanField(verbose_name="Машиностроение", default=False)
+#     industry = models.BooleanField(verbose_name="Текстильное промышленность", default=False)
+#
+#     #####################################################################
+#
+#     choose_direction_fashion = models.CharField(max_length=300, verbose_name="Выберите направление (Fashion)",
+#                                                 **parametersForNull)
+#     choose_direction_food = models.CharField(max_length=300, verbose_name="Выберите направление (Food)",
+#                                              **parametersForNull)
+#     choose_direction_expert = models.CharField(max_length=300, verbose_name="Эксперт", **parametersForNull)
+#
+#     status = models.CharField(max_length=300, verbose_name="Статус", **parametersForNull)
+#     manager = models.CharField(max_length=300, verbose_name="Менеджер", **parametersForNull)
+#     referal = models.CharField(max_length=300, verbose_name="Реферал", **parametersForNull)
+#
+#     ####################################.       PASSWORD    #################################
+#     uniqueId = models.UUIDField(unique=True, verbose_name="Уникальный id", **parametersForNull)
+#     email = models.EmailField(max_length=200, verbose_name="Email", unique=True)
+#
+#     resetPasswordUUID = models.UUIDField(verbose_name="Ссылка для восстановления пароля", **parametersForNull)
+#     resetPasswordDate = models.BigIntegerField(verbose_name="Время восстановления пароля", **parametersForNull)
+#
+#     USERNAME_FIELD = 'email'
+#
+#     REQUIRED_FIELDS = []
+#
+#     objects = CustomManager()
+#
+#     def save(self, force_insert=False, force_update=False, using=None,
+#              update_fields=None):
+#         if not self.id:
+#             self.uniqueId = uuid.uuid4()
+#         super(User, self).save(force_insert=False, force_update=False, using=None, update_fields=None)
\ No newline at end of file
